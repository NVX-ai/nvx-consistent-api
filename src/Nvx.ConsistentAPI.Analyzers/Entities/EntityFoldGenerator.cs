using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Nvx.ConsistentAPI.Analyzers;

[Generator]
public class EntityFoldGenerator : IIncrementalGenerator
{
  public void Initialize(IncrementalGeneratorInitializationContext context) =>
    context.RegisterSourceOutput(
      context.GetEntities(),
      (productionContext, symbol) =>
      {
        if (SymbolKeyword(symbol) is not { } symbolKeyword)
        {
          return;
        }

        var events = symbol.RegularFoldEvents().Concat(symbol.ExternalFoldEvents());
        var eventNamespaces = events
          .Select(e => e.ContainingNamespace.ToDisplayString())
          .Append("Nvx.ConsistentAPI")
          .Distinct()
          .ToArray();

        var content =
          new StringBuilder(
            FileHeader(symbol.ContainingNamespace.ToDisplayString(), symbol.Name, symbolKeyword, eventNamespaces));

        content.AppendLine(FoldSignature(symbol.Name));
        content.AppendLine("    evt switch");
        content.AppendLine("    {");

        foreach (var normalEvent in symbol.RegularFoldEvents().Concat(symbol.ExternalFoldEvents()))
        {
          content.AppendLine($"      {normalEvent.Name} e => await Fold(e, metadata, fetcher),");
        }

        content.AppendLine("      _ => this");
        content.AppendLine("    };");

        content.AppendLine("}");
        productionContext.AddSource($"{symbol.Name}.CentralFolder.g.cs", content.ToString());
      });

  private static string? SymbolKeyword(INamedTypeSymbol symbol) =>
    symbol.TypeKind switch
    {
      _ when symbol.IsRecord => "record",
      TypeKind.Class => "class",
      TypeKind.Struct => "struct",
      _ => null
    };

  private static string FoldSignature(string typeName) =>
    $"""
       public async ValueTask<{typeName}> Fold(
         EventModelEvent evt,
         EventMetadata metadata,
         RevisionFetcher fetcher) =>
     """;

  private static string FileHeader(
    string nameSpace,
    string typeName,
    string typeSymbolKey,
    string[] eventNamespaces)
  {
    var header = new StringBuilder();
    header.AppendLine("// <auto-generated />");
    foreach (var eventNamespace in eventNamespaces)
    {
      header.AppendLine($"using {eventNamespace};");
    }

    header.AppendLine();
    header.AppendLine($"namespace {nameSpace};");
    header.AppendLine();
    header.AppendLine($"public partial {typeSymbolKey} {typeName}");
    header.AppendLine("{");
    header.AppendLine();
    return header.ToString();
  }
}
